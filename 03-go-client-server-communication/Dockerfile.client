# from golang 1.16 version with alpine linux which is light weight,  naming it as a "build"
FROM golang:1.16-alpine  AS build

# creating directory in the container withh name /app, this will be user as base diretory 
WORKDIR /app

# Download necessary Go modules
COPY go-client/go.mod ./
COPY go-client/go.sum ./
RUN go mod download

# copy all go files inside the /app directory 
COPY go-client/*.go ./

# by default CGO is desabled in alpine image
ENV CGO_ENABLED=0

# creating golang build and naming the build as "go-docker-app" wit -o flag 
RUN go build -o /go-client


## Multistage build to reduce the image size 
FROM gcr.io/distroless/base-debian10

WORKDIR /

COPY --from=build /go-client /go-client

# # expose port 8080 to outside application 
# EXPOSE 8090

USER nonroot:nonroot

# running golang binary inside the container
ENTRYPOINT ["/go-client"]
